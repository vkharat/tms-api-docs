{
  "paths": {
    "/quotes": {
      "post": {
        "tags": ["Quote Management"],
        "summary": "Create a new quote request",
        "description": "Creates a new shipping quote request. The response includes one or more route options with associated costs and schedules.",
        "operationId": "createQuote",
        "parameters": [
          {
            "$ref": "#/components/parameters/correlationId"
          },
          {
            "$ref": "#/components/parameters/idempotencyKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuoteRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Quote request accepted for processing",
            "headers": {
              "Location": {
                "description": "URL to check quote status",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteAccepted"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/429TooManyRequests"
          }
        }
      }
    },
    "/quotes/{quoteId}": {
      "get": {
        "tags": ["Quote Management"],
        "summary": "Retrieve a quote",
        "description": "Retrieves the current state of a quote request including all available options if processing is complete.",
        "operationId": "getQuote",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the quote",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/correlationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Quote retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuoteResponse"
                }
              }
            }
          },
          "404": {
            "description": "Quote not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "QuoteRequest": {
        "allOf": [
          {
            "$ref": "./tms-api-spec-common.json#/components/schemas/BaseEntity"
          },
          {
            "type": "object",
            "required": ["routingDetails", "cargoDetails"],
            "description": "Request for a shipping quote",
            "properties": {
              "routingDetails": {
                "$ref": "./tms-api-spec-routing.json#/components/schemas/RoutingDetails"
              },
              "cargoDetails": {
                "$ref": "#/components/schemas/CargoDetails"
              },
              "serviceRequirements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ServiceRequirement"
                }
              },
              "preferredCurrency": {
                "type": "string",
                "pattern": "^[A-Z]{3}$",
                "description": "Preferred currency for quote (ISO code)"
              }
            }
          }
        ]
      },
      "CargoDetails": {
        "type": "object",
        "required": ["type", "quantity"],
        "description": "Cargo information for quote",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["FCL", "LCL", "BULK", "BREAKBULK"],
            "description": "Type of cargo"
          },
          "quantity": {
            "type": "integer",
            "minimum": 1,
            "description": "Quantity of cargo units"
          },
          "weight": {
            "$ref": "#/components/schemas/Weight"
          },
          "volume": {
            "$ref": "#/components/schemas/Volume"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "hazardous": {
            "type": "boolean",
            "description": "Whether cargo is hazardous"
          },
          "hazmatDetails": {
            "$ref": "#/components/schemas/HazmatDetails"
          },
          "temperatureRequirements": {
            "$ref": "#/components/schemas/TemperatureRequirements"
          }
        }
      },
      "Weight": {
        "type": "object",
        "required": ["value", "unit"],
        "description": "Weight measurement",
        "properties": {
          "value": {
            "type": "number",
            "minimum": 0,
            "description": "Weight value"
          },
          "unit": {
            "type": "string",
            "enum": ["KG", "LB"],
            "description": "Weight unit"
          }
        }
      },
      "Volume": {
        "type": "object",
        "required": ["value", "unit"],
        "description": "Volume measurement",
        "properties": {
          "value": {
            "type": "number",
            "minimum": 0,
            "description": "Volume value"
          },
          "unit": {
            "type": "string",
            "enum": ["CBM", "CFT"],
            "description": "Volume unit"
          }
        }
      },
      "Dimensions": {
        "type": "object",
        "required": ["length", "width", "height", "unit"],
        "description": "Physical dimensions",
        "properties": {
          "length": {
            "type": "number",
            "minimum": 0,
            "description": "Length"
          },
          "width": {
            "type": "number",
            "minimum": 0,
            "description": "Width"
          },
          "height": {
            "type": "number",
            "minimum": 0,
            "description": "Height"
          },
          "unit": {
            "type": "string",
            "enum": ["CM", "IN"],
            "description": "Dimension unit"
          }
        }
      },
      "ServiceRequirement": {
        "type": "object",
        "required": ["type"],
        "description": "Service requirement for quote",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TEMPERATURE_CONTROLLED",
              "HAZMAT_HANDLING",
              "INSURANCE",
              "CUSTOMS_CLEARANCE",
              "DOOR_TO_DOOR",
              "EXPRESS_SERVICE"
            ],
            "description": "Type of service required"
          },
          "details": {
            "type": "object",
            "additionalProperties": true,
            "description": "Service specific details"
          }
        }
      },
      "HazmatDetails": {
        "type": "object",
        "required": ["unNumber", "class"],
        "description": "Hazardous materials details",
        "properties": {
          "unNumber": {
            "type": "string",
            "pattern": "^UN\\d{4}$",
            "description": "UN number"
          },
          "class": {
            "type": "string",
            "description": "Hazard class"
          },
          "packingGroup": {
            "type": "string",
            "enum": ["I", "II", "III"],
            "description": "Packing group"
          },
          "properShippingName": {
            "type": "string",
            "description": "Proper shipping name"
          }
        }
      },
      "TemperatureRequirements": {
        "type": "object",
        "required": ["min", "max", "unit"],
        "description": "Temperature control requirements",
        "properties": {
          "min": {
            "type": "number",
            "description": "Minimum temperature"
          },
          "max": {
            "type": "number",
            "description": "Maximum temperature"
          },
          "unit": {
            "type": "string",
            "enum": ["CELSIUS", "FAHRENHEIT"],
            "description": "Temperature unit"
          }
        }
      }
    }
  }
}